{"version":3,"file":"static/js/14.2356832f.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Form/Form.module.css?89ba","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/contactsSelectors.js","components/Form/Form.jsx","components/UpdateForm/updateForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Phonebook/Phonebook.module.css?3a02","components/Phonebook/PhoneBook.jsx","pages/PhonebookPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"filterWrap\":\"Filter_filterWrap__xOHoa\",\"filterTitle\":\"Filter_filterTitle__5SDqd\"};","import { useDispatch, useSelector } from 'react-redux';\nimport s from './Filter.module.css';\nimport { actions } from 'redux/contacts/contactsSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={s.filterWrap}>\n      <label>\n        <p className={s.filterTitle}>Find contact by name</p>\n        <input\n          type=\"text\"\n          value={filter}\n          onChange={e => {\n            dispatch(actions.changeFilter(e.target.value));\n          }}\n        />\n      </label>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"btnForm\":\"Form_btnForm__97Fxv\",\"caption\":\"Form_caption__YaEih\"};","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts.items;\nexport const selectContactsFilter = state => state.contacts.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContactsFilter, selectContacts],\n  (filter, contacts) => {\n    if (filter === '') return contacts;\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\n\nimport s from './Form.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContactThunk } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\nconst initialState = { name: '', number: '' };\n\nexport const Form = () => {\n  const [form, setForm] = useState(initialState);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleChange = ({ target: { name, value } }) => {\n    setForm(prevForm => {\n      return { ...prevForm, [name]: value };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    contacts.some(\n      contact => contact.name.toLowerCase() === form.name.toLowerCase()\n    )\n      ? alert(`${form.name} is already in contacts!`)\n      : dispatch(addContactThunk(form));\n    setForm(initialState);\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label>\n        <p className={s.caption}>Name</p>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={form.name}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        <p className={s.caption}>Number</p>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={form.number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={s.btnForm} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateContactThunk } from 'redux/contacts/contactsOperations';\n\nexport const UpdateForm = ({ contact, closeForm }) => {\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(updateContactThunk({ ...contact, name, number }));\n    setName('');\n    setNumber('');\n    closeForm();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <input\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        autoComplete=\"false\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"  number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <button type=\"submit\">Save</button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"Phonebook_contactsList__P05jh\",\"contactsItem\":\"Phonebook_contactsItem__c7BeR\"};","import { UpdateForm } from 'components/UpdateForm/updateForm';\nimport s from './Phonebook.module.css';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  deleteContactThunk,\n  fetchContactsThunk,\n} from 'redux/contacts/contactsOperations';\nimport { selectFilteredContacts } from 'redux/contacts/contactsSelectors';\n\nexport const PhoneBook = () => {\n  const [contactToUpdate, setContactToUpdate] = useState({});\n  const dispatch = useDispatch();\n  const filterContacts = useSelector(selectFilteredContacts);\n\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  const showUpdateForm = contactId => {\n    const contact = filterContacts.find(({ id }) => id === contactId);\n    setContactToUpdate(contact);\n  };\n  const closeForm = () => {\n    setContactToUpdate(null);\n  };\n\n  return (\n    <ul className={s.contactsList}>\n      {filterContacts?.map(({ name, number, id }) => {\n        return (\n          <li className={s.contactsItem} key={id}>\n            <p>\n              {name} : {number}\n            </p>\n            <button\n              type=\"button\"\n              onClick={() => {\n                dispatch(deleteContactThunk(id));\n              }}\n            >\n              Delete\n            </button>\n            <button type=\"button\" onClick={() => showUpdateForm(id)}>\n              Edit\n            </button>\n            {contactToUpdate?.id === id && (\n              <UpdateForm contact={contactToUpdate} closeForm={closeForm} />\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import { Filter } from 'components/Filter/Filter';\nimport { Form } from 'components/Form/Form';\nimport { PhoneBook } from 'components/Phonebook/PhoneBook';\n\nconst PhonebookPage = () => {\n  return (\n    <div>\n      <Form />\n      <Filter />\n      <PhoneBook />\n    </div>\n  );\n};\n\nexport default PhonebookPage;\n"],"names":["Filter","filter","useSelector","state","contacts","dispatch","useDispatch","className","s","type","value","onChange","e","actions","target","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","items","selectFilteredContacts","contact","toLowerCase","includes","initialState","number","Form","useState","form","setForm","handleChange","prevForm","onSubmit","preventDefault","some","alert","addContactThunk","pattern","title","required","UpdateForm","closeForm","setName","setNumber","event","updateContactThunk","autoComplete","PhoneBook","contactToUpdate","setContactToUpdate","filterContacts","useEffect","fetchContactsThunk","id","onClick","deleteContactThunk","contactId","showUpdateForm"],"sourceRoot":""}